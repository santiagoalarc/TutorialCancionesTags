name: Pull Request
on:
  pull_request:
    types:
      - labeled
      - unlabeled
      - synchronize
      - opened
      - edited
      - ready_for_review
      - reopened
      - unlocked
    branches: [ develop ]
jobs:
  job1:
    name: Pruebas
    runs-on: ubuntu-latest
    steps:
      - name: Checkout de repositorio
        uses: actions/checkout@v2
      - name: Configuración de entorno de python
        uses: actions/setup-python@v2
        with:
          python-version: '3.7'
      - name: Instalación de librerías y dependencias
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install faker
      - name: Correr pruebas
        id: correr-pruebas
        run: python -m unittest discover -s tests -v
      - name: Validar resultado con errores
        if: ${{ failure() }}
        env:
          MENSAJE_ERROR: Una o varias pruebas fallaron
        run: echo "::set-output name=respuesta::${MENSAJE_ERROR}"
      - name: Validar resultado sin errores
        id: validate-result-successfully
        if: ${{ success() }}
        env:
          MENSAJE_EXITO: Todas las pruebas fueron exitosas
        run: echo "::set-output name=respuesta::${MENSAJE_EXITO}"
      - name: Calculo de cubrimiento
        id: cubrimiento
        run: |
          coverage run -m unittest discover -s tests -v
          coverage report -m
      - name: Check commit message for keyword
        run: |
          keyword="Merge"
          commit_message=$(git log --format=%B -n 1 ${{ github.sha }})
          if [[ "$commit_message" == *"$keyword"* ]]; then
            echo "Keyword found in commit message."
            should_create_release=true
          else
            echo "Keyword not found in commit message. Exiting..."
            should_create_release=false
          fi
      - name: Create Release Branch
        id: create-release-branch
        run: |
          if [ "$should_create_release" = true ]; then
            git checkout -b release develop
            git push origin release
          fi
      - name: Merge Develop into Release
        if: ${{ steps.create-release-branch.outcome == 'success' }}
        run: |
          if [ "$should_create_release" = true ]; then
            git checkout release
            git merge develop --no-ff --no-edit
            git push origin release
          fi
      - name: Merge Develop into Release and Main
        if: ${{ steps.create-release-branch.outcome == 'success' }}
        run: |
          if [ "$should_create_release" = true ]; then
            git checkout release
            git merge develop --no-ff --no-edit
            git push origin release
          
            git checkout main
            git merge develop --no-ff --no-edit
            git push origin main
          fi
  automerge:
    name: Automerge
    needs: job1
    runs-on: ubuntu-latest
    steps:
      - name: automerge
        uses: "pascalgn/automerge-action@v0.15.6"
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
          MERGE_LABELS: ""